require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ResourcesController do
  include ResourcesHelper
  render_views
  
  describe "GET download" do
    before(:each) do
      @user = FactoryGirl.create(:user)
      @user.confirm!
      @resource = FactoryGirl.create(:resource, :user_id => @user.id)
    end

    it "should redirect to sign in page if user not signed in" do
      attachment = @resource.attachments.first
      file_info = get_file_info attachment.file.path
      get :download, {:id => file_info[:folder], :basename => file_info[:base_name], :extension => file_info[:extension]}
      response.should redirect_to(new_user_session_path)
    end

    it "should be success if user is signed in" do
      sign_in @user

      attachment = @resource.attachments.first
      file_info = get_file_info attachment.file.path
      get :download, {:id => file_info[:folder], :basename => file_info[:base_name], :extension => file_info[:extension]}
      response.should be_success
    end

    it "should increment user download count after success" do
      sign_in @user

      #before
      user = User.find_by_email(@user.email)
      user.downloads.should == 0

      attachment = @resource.attachments.first
      file_info = get_file_info attachment.file.path
      get :download, {:id => file_info[:folder], :basename => file_info[:base_name], :extension => file_info[:extension]}

      #after
      user = User.find_by_email(@user.email)
      user.downloads.should == 1
    end

    it "should increment attachment download count after success" do
      sign_in @user

      #before
      attachment = Attachment.find_by_id(@resource.attachments.first.id)
      attachment.downloads.should == 0

      file_info = get_file_info attachment.file.path
      get :download, {:id => file_info[:folder], :basename => file_info[:base_name], :extension => file_info[:extension]}

      #after
      attachment = Attachment.find_by_id(@resource.attachments.first.id)
      attachment.downloads.should == 1
    end

    it "should increment attachment download count after success for user and attachment" do
      sign_in @user

      #before
      user = User.find_by_email(@user.email)
      user.user_attachment_downloads.length.should == 0
      attachment = Attachment.find_by_id(@resource.attachments.first.id)
      attachment.user_attachment_downloads.length.should == 0

      file_info = get_file_info attachment.file.path
      get :download, {:id => file_info[:folder], :basename => file_info[:base_name], :extension => file_info[:extension]}

      #after
      user = User.find_by_email(@user.email)
      user.user_attachment_downloads.length.should == 1
      attachment = Attachment.find_by_id(@resource.attachments.first.id)
      attachment.user_attachment_downloads.length.should == 1
    end

=begin
    it "should increment user download count after success" do
      login_user
      get :download
      response.should be_success
    end
=end
  end

  describe "GET show" do
    before(:each) do
      @user = FactoryGirl.create(:user)
      @user.confirm!
      @resource = FactoryGirl.create(:resource, :user_id => @user.id)
    end

    it "assigns the requested resource as @resource" do
      get :show, {:id => @resource.id}
      response.should be_success
    end

    it "should increment user_resource view count after success for user and resource" do
      sign_in @user

      #before
      user = User.find_by_email(@user.email)
      user.user_resource_views.length.should == 0
      resource = Resource.find_by_id(@resource.id)
      resource.user_resource_views.length.should == 0

      get :show, {:id => @resource.id}

      #after
      user = User.find_by_email(@user.email)
      user.user_resource_views.length.should == 1
      resource = Resource.find_by_id(@resource.id)
      resource.user_resource_views.length.should == 1
    end

    it "should increment user_resource view count after success for nil and resource even if no one is signed in" do
      #before
      resource = Resource.find_by_id(@resource.id)
      resource.user_resource_views.length.should == 0

      get :show, {:id => @resource.id}

      #after
      resource = Resource.find_by_id(@resource.id)
      resource.user_resource_views.length.should == 1

      user_resource_view = UserResourceView.first
      user_resource_view.user_id.should be_nil
    end

    it "should increment view count" do
      #before
      resource = Resource.find_by_id(@resource.id)
      resource.views.should == 0

      get :show, {:id => @resource.id}
      get :show, {:id => @resource.id}

      #after
      resource = Resource.find_by_id(@resource.id)
      resource.views.should == 2
    end
  end

  describe "GET new" do
    it "should redirect to sign in page" do
      get :new
      response.should redirect_to(new_user_session_path)
    end
=begin
    it "after login should go to page" do
      login_user
      get :new
      response.should have_selector('body', :content => 'New resource')
    end
=end
  end

=begin
  # This should return the minimal set of attributes required to create a valid
  # Resource. As you add validations to Resource, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ResourcesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all resources as @resources" do
      resource = Resource.create! valid_attributes
      get :index, {}, valid_session
      assigns(:resources).should eq([resource])
    end
  end

  describe "GET show" do
    it "assigns the requested resource as @resource" do
      resource = Resource.create! valid_attributes
      get :show, {:id => resource.to_param}, valid_session
      assigns(:resource).should eq(resource)
    end
  end

  describe "GET edit" do
    it "assigns the requested resource as @resource" do
      resource = Resource.create! valid_attributes
      get :edit, {:id => resource.to_param}, valid_session
      assigns(:resource).should eq(resource)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Resource" do
        expect {
          post :create, {:resource => valid_attributes}, valid_session
        }.to change(Resource, :count).by(1)
      end

      it "assigns a newly created resource as @resource" do
        post :create, {:resource => valid_attributes}, valid_session
        assigns(:resource).should be_a(Resource)
        assigns(:resource).should be_persisted
      end

      it "redirects to the created resource" do
        post :create, {:resource => valid_attributes}, valid_session
        response.should redirect_to(Resource.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved resource as @resource" do
        # Trigger the behavior that occurs when invalid params are submitted
        Resource.any_instance.stub(:save).and_return(false)
        post :create, {:resource => {}}, valid_session
        assigns(:resource).should be_a_new(Resource)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Resource.any_instance.stub(:save).and_return(false)
        post :create, {:resource => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested resource" do
        resource = Resource.create! valid_attributes
        # Assuming there are no other resources in the database, this
        # specifies that the Resource created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Resource.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => resource.to_param, :resource => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested resource as @resource" do
        resource = Resource.create! valid_attributes
        put :update, {:id => resource.to_param, :resource => valid_attributes}, valid_session
        assigns(:resource).should eq(resource)
      end

      it "redirects to the resource" do
        resource = Resource.create! valid_attributes
        put :update, {:id => resource.to_param, :resource => valid_attributes}, valid_session
        response.should redirect_to(resource)
      end
    end

    describe "with invalid params" do
      it "assigns the resource as @resource" do
        resource = Resource.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Resource.any_instance.stub(:save).and_return(false)
        put :update, {:id => resource.to_param, :resource => {}}, valid_session
        assigns(:resource).should eq(resource)
      end

      it "re-renders the 'edit' template" do
        resource = Resource.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Resource.any_instance.stub(:save).and_return(false)
        put :update, {:id => resource.to_param, :resource => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested resource" do
      resource = Resource.create! valid_attributes
      expect {
        delete :destroy, {:id => resource.to_param}, valid_session
      }.to change(Resource, :count).by(-1)
    end

    it "redirects to the resources list" do
      resource = Resource.create! valid_attributes
      delete :destroy, {:id => resource.to_param}, valid_session
      response.should redirect_to(resources_url)
    end
  end
=end
end
